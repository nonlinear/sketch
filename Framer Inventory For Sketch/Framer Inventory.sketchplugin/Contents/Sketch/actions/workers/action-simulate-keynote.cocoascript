@import 'inventory/classes/state.cocoascript'
@import 'actions/workers/action-select-duplicated-artboards.cocoascript'

// generate code for layers
var runSimulateKeynote = function(context, isTestingEnvironment) {
	
	var doc = context.document
	var selection = context.selection
	
	[[NSPasteboard generalPasteboard] clearContents]
	
	// if (isTestingEnvironment != nil && isTestingEnvironment) {
// 		if (showLog) { log("Prepare custom selection for keynote tests") }
// 		selection = TestingEnvironment.getTestingSelection()
//
// 		if (showLog) { log(selection) }
// 	}
	
	var layers = []
	var pasteboardContent = []
	
	var currentPage = FramerInventory.getCurrentPage()
	var framerInventoryPage = FramerInventory.addPage(currentPage)
	FramerInventory.cleanPage(framerInventoryPage)
	
	var artboards = [[doc currentPage] artboards]
	
	var duplicatedArtboard = FramerInventory.returnDuplicatedArtboards(artboards)
	if (duplicatedArtboard != nil) {
		if (showLog) { log("Warning: duplicated artboards names are found") }
		selectDuplicatedArtboards([duplicatedArtboard name])
		return
	}
	

	var sortedSelection = FramerInventory.organiseSelection([currentPage exportableLayers])
	if (sortedSelection == nil) {
		[doc showMessage:"Nothing to simulate. Please, make some layers exportable"]
		return
	}
	
	for (var i = 0; i < [sortedSelection count]; i++) {
		var currentLayer = [sortedSelection objectAtIndex: i]
		var layer = new Layer([currentLayer name])
		var hasInitialState = false
		var hasCurrentState = false
		
		var predicate = NSPredicate.predicateWithFormat("name == %@ && className == %@", [currentLayer name],
																						 [currentLayer className])
		for (var j = 0; j < [artboards count]; j++) {
			
			var hasPrevState = hasCurrentState
			var prevLayers = matchingLayers
			
			var matchingLayers = FramerInventory.findMatchingLayers(predicate, currentLayer, [artboards objectAtIndex: j])
			
			// var matchingLayers = findLayersMatchingPredicate_inContainer_filterByType(predicate, [artboards objectAtIndex: j])
//
//
// 			if ([matchingLayers count] == 0 && ([currentLayer className] == "MSLayerGroup" || [currentLayer className] == "MSSymbolInstance")) {
// 				log("CARE WITH SYMBOLS: " + [currentLayer name])
//
// 				if ([currentLayer className] == "MSLayerGroup") {
// 					var predicateNext = NSPredicate.predicateWithFormat("name == %@ && className == %@", [currentLayer name], "MSSymbolInstance")
// 				}
// 				else {
// 					var predicateNext = NSPredicate.predicateWithFormat("name == %@ && className == %@", [currentLayer name], "MSLayerGroup")
// 				}
//
// 				matchingLayersNext = findLayersMatchingPredicate_inContainer_filterByType(predicateNext, [artboards objectAtIndex: j])
// 				matchingLayers = FramerInventory.addArrayToArray(matchingLayersNext, matchingLayers)
// 				log("ML:" + matchingLayers.count())
// 			}
			
			
			if ([matchingLayers count] > 0) {
				hasCurrentState = true

				if (j == 0) { 
					hasInitialState = true
				}
				else if (!hasInitialState) {
					var fakeFirstState = new State([matchingLayers firstObject])
					fakeFirstState.createHiddenState([[artboards firstObject] name])
					layer.addState(fakeFirstState)
					hasInitialState = true
				}
				
				layer.composeState([matchingLayers firstObject])
			}
			else {
				hasCurrentState = false
				
				if (hasPrevState) {
					var fakeCloseStep = new State([prevLayers firstObject])
					fakeCloseStep.createHiddenState([[artboards objectAtIndex: j] name])
					layer.addState(fakeCloseStep)
				}
			}
		}
		
		layers.push(layer)
	}
	

	pasteboardContent += DescribeInventory.generateRetinaVariable() + ln()
	pasteboardContent += DescribeInventory.generatePhoneModel()
	pasteboardContent += dln()
	pasteboardContent += "# view" + ln()
	
	for (var i = 0; i < layers.length; i++) {
		pasteboardContent += layers[i].printLayer()
	}
	
	pasteboardContent += ln()
	pasteboardContent += "# model" + ln()
	pasteboardContent += DescribeInventory.generateCycleButton()
	
	var cycleStates = FramerInventory.getUsedStatesNames())
	pasteboardContent += DescribeInventory.generateCycleStates(cycleStates)
	
	pasteboardContent += DescribeInventory.generateLayers(sortedSelection)
	pasteboardContent += DescribeInventory.generateCycler()
	pasteboardContent += DescribeInventory.generateHandler()
	

	
	if (!isTestingEnvironment) {
		[[NSPasteboard generalPasteboard] setString:pasteboardContent  forType:NSStringPboardType];
		FramerInventory.showDoneMessage()
	}
	
	return pasteboardContent
}

