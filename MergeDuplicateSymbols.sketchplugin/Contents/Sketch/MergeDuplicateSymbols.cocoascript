var onRun = function(context) {

var doc = context.document;

function GetSymbolsByName(name){
    var allSymbols = context.document.documentData().allSymbols();
    var matchingSymbols = [];
    for(var i=0; i < allSymbols.count(); i++){
        var symbolName = allSymbols[i].name().toString();
        if(symbolName.localeCompare(name) == 0)
        {
            matchingSymbols.push(allSymbols[i]);
        }        
    }
    return matchingSymbols;
}

function handleAlertResponse(window, responseCode) {
    if (responseCode == "1000") {
        return "OK";
	}
    else if (responseCode == "1002") {
        return "CONTINUE LATER";
	}
    return null;
}



function FindSymbolInstances(originalSymbol, duplicateSymbolsByName){
    var instancesPerSymbol = [];
    for(var i=0;i<duplicateSymbolsByName.length;i++)
    {
        instancesPerSymbol[i] = NSMutableArray.array();
    }


    var layers = NSMutableArray.array();    
    var pagesLoop = context.document.pages().objectEnumerator();

    while (item = pagesLoop.nextObject()) {
        layers.addObjectsFromArray(item.children())
    }

    var layersLoop = layers.objectEnumerator();
    
    while (item = layersLoop.nextObject()) {
        if (item.isMemberOfClass(MSSymbolInstance))
        {
            for(var i=0;i<duplicateSymbolsByName.length;i++)
            {
                if(item.symbolID().isEqualToString(duplicateSymbolsByName[i].symbolID()))
                    instancesPerSymbol[i].addObject(item);
            }
        }
    }

    return instancesPerSymbol;
}

function CreateWindow(symbolName, duplicatedSymbolsByName, instancesPerSymbol, totalInstances, matrix, cellWidth, cellHeight, matrixHeight){
    var window = COSAlertWindow.new();
    window.setMessageText("Merging symbol '"+symbolName+"'");
    window.setIcon(NSImage.alloc().initByReferencingFile(context.plugin.urlForResourceNamed("icon.png").path()));
    window.setInformativeText("There are "+duplicatedSymbolsByName.length+" symbols with this name. Choose the one you want to keep and press OK. The other symbols will be removed, and all of their instances will be replaced by the one you chose to keep.");
    var okbutton = window.addButtonWithTitle("OK");
    window.addButtonWithTitle("Don't merge this one");
    window.addButtonWithTitle("Continue later");
      

    var cells = matrix.cells();
           
    for(var j=0;j<duplicatedSymbolsByName.length;j++){
        var exportRequest = MSExportRequest.exportRequestsFromExportableLayer_inRect_useIDForName_(
            duplicatedSymbolsByName[j],
            duplicatedSymbolsByName[j].absoluteInfluenceRect(),
            false
            ).firstObject()
  
        exportRequest.format = "png"
        
        var scaleX = cellWidth / exportRequest.rect().size.width;
        var scaleY = (cellHeight-20) / exportRequest.rect().size.height;

        if(scaleX<scaleY)
            exportRequest.scale = scaleX;
        else
            exportRequest.scale = scaleY;
            
        var colorSpace = NSColorSpace.sRGBColorSpace()
        var exporter = MSExporter.exporterForRequest_colorSpace_(exportRequest, colorSpace)
        var imageRep = exporter.bitmapImageRep()

        var image = NSImage.alloc().init().autorelease();
        image.addRepresentation(imageRep);
        
        cells.objectAtIndex(j).setImagePosition(NSImageAbove);
        cells.objectAtIndex(j).setImage(image);
        cells.objectAtIndex(j).setTitle(instancesPerSymbol[j].length+" instances ("+(instancesPerSymbol[j].length*100/totalInstances)+"%)");
    }
    var scrollHeight = matrixHeight;
    if(matrixHeight > 400)
        scrollHeight = 400;   

    var listContainer = [[NSScrollView alloc] initWithFrame:NSMakeRect(0,0,cellWidth,scrollHeight)];

    listContainer.setDocumentView(matrix);

    if(scrollHeight != matrixHeight)
        listContainer.setHasVerticalScroller(true);

    window.setAccessoryView(listContainer);
    return window;
}

function MergeSymbols(duplicatedSymbolsByName, instancesPerSymbol, symbolToKeep){
    for(var i=0;i<duplicatedSymbolsByName.length;i++){
        if(i!=symbolToKeep)
        {
            var instancesOfSymbol = instancesPerSymbol[i];
            for(var k=0;k<instancesOfSymbol.length;k++){
                instancesOfSymbol[k].symbolID = duplicatedSymbolsByName[symbolToKeep].symbolID();
            }
            duplicatedSymbolsByName[i].removeFromParent();
        }
    }
}

function GetTextBasedOnCount(number){
    if(number!=1){
        return " symbols were ";
    }
    else
    {
        return " symbol was ";
    }
}

var symbols = context.document.documentData().allSymbols();
var artboardNames=[];
var duplicatedSymbols=[];
var checkedSymbols = [];
var mergedSymbols = 0;
var cellWidth = 430;
var cellHeight = 100;
var continuous = true;

for(var i=0; i < symbols.count(); i++){
    var symbolName = symbols[i].name();
    var recomposedSymbolName = "";
    for(var j=0;j<symbolName.length();j++){
        recomposedSymbolName += symbolName.charAt(j);
    }

    if(artboardNames.indexOf(recomposedSymbolName)<0)
    {
        artboardNames.push(recomposedSymbolName);
    }
    else{  
        if(duplicatedSymbols.indexOf(recomposedSymbolName)<0)      
            duplicatedSymbols.push(recomposedSymbolName);
    }
}
for (var i = 0; i < duplicatedSymbols.length; i++) {
    var duplicatedSymbolsByName = GetSymbolsByName(duplicatedSymbols[i]);
    var buttonFormat = NSButtonCell.alloc().init();
    var matrixHeight = (cellHeight+0)*duplicatedSymbolsByName.length;
    var matrix = NSMatrix.alloc().initWithFrame_mode_prototype_numberOfRows_numberOfColumns(
            NSMakeRect(0, 0, cellWidth, matrixHeight),
            NSListModeMatrix,
            buttonFormat,
            duplicatedSymbolsByName.length,
            1
    );
    matrix.setCellSize(CGSizeMake(cellWidth, cellHeight));
    
    var totalInstances = 0;
    var instancesPerSymbol = FindSymbolInstances(duplicatedSymbolsByName[j], duplicatedSymbolsByName);

    for(var p = 0;p<instancesPerSymbol.length;p++)
        totalInstances+=instancesPerSymbol[p].length;

    var window = CreateWindow(duplicatedSymbols[i], duplicatedSymbolsByName, instancesPerSymbol, totalInstances, matrix, cellWidth, cellHeight, matrixHeight); 
    var responseCode = handleAlertResponse(window, window.runModal());
    
    var symbolToKeep = matrix.cells().indexOfObject(matrix.selectedCell());
        
    if(responseCode == "OK"){
        MergeSymbols(duplicatedSymbolsByName, instancesPerSymbol, symbolToKeep);
        mergedSymbols++;
    }
    else if(responseCode == "CONTINUE LATER")
    {    	
    	[doc showMessage: "Cool, we'll continue later!  Meanwhile, "+mergedSymbols+GetTextBasedOnCount(mergedSymbols)+"merged"];
        continuous = false;
    }


    if(!continuous)
        break;
}

if(continuous)
{
    if(duplicatedSymbols.length>0)
        [doc showMessage: "Hey ho! "+mergedSymbols+GetTextBasedOnCount(mergedSymbols)+"merged"];
    else
        [doc showMessage: "It seems there are no symbols (with the same name) to merge"];
}
                   
};
          